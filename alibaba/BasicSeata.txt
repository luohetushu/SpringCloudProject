Spring Cloud Alibaba Seata: 处理分布式事务

分布式事务问题：
    分布式之后，实际的业务操作需要调用多个微服务来完成。此时每个微服务内部的数据一致性由本地业务来保证，但是全局的数据一致性问题没法保证，
    简单地说，一次业务操作需要跨多个数据源或需要跨多个系统进行远程调用，就会产生分布式事务问题

官网：http://seata.io/zh-cn/

Seata：Simple Extensible Autonomous Transaction Architecture ， 简单可扩展自治事务框架
       一款开源的分布式事务解决方案，致力于在微服务架构下提供高性能和简单易用的分布式事务服务

Seata 关键组件：
    一 ID ：Transaction ID（XID），全局唯一的事务 ID
    三组件模型：Transaction Coordinator（TC）：事务协调者，维护全局和分支事务的状态，驱动全局事务提交或回滚
                   todo 简单地说，就是 seata 服务器
              Transaction Manager（TM）：事务管理器，定义全局事务的范围：开始全局事务、提交或回滚全局事务
                   todo 简单地说，就是真实业务类添加 @GlobalTransaction 的事务发起方
              Resource Manager（RM）：资源管理器，管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚
                   todo 简单地说，就是多个连接单独数据库的微服务，事务的参与方
Seata 处理分布式事务的过程：
    TM 向 TC 申请开启一个全局事务，全局事务创建成功并生成一个全局唯一的 XID；
    XID 在微服务调用链路的上下文中传播；
    RM 向 TC 注册分支事务，将其纳入 XID 对应全局事务的管辖；
    TM 向 TC 发起针对 XID 的全局提交或回滚决议；
    TC 调度 XID 下管辖的全部分支事务完成提交或回滚请求


todo 下载安装：
使用编译的方式：
1、git clone -b 1.2.0 git@git.com:seata/seata.git
   mvn 编译安装：mvn -Prelease-all -DskipTests clean install -U
2、修改配置文件：
  file.conf  // 自定义事务组名称（service）+事务日志存储模式为db（store）+数据库连接信息
3、进入 bin 目录启动：
  cd /seata/bin
  启动：sh seata-server.sh -h 127.0.0.1 -p 8091 -m db
       -h: 注册到注册中心的ip (要和注册中心的IP相同，才能注册到注册中心上去，本地就是127.0.0.1了)
       -p: seata-server的端口号
       -m: 全局事务会话信息存储模式，file、db，优先读取启动参数
  启动出现的问题：
      问题一：Error: Could not create the Java Virtual Machine.
             Error: A fatal exception has occurred. Program will exit.
             todo 解决：安装官网指示：如环境为sh，替换脚本中最后一段：  // https://seata.io/zh-cn/docs/overview/faq.html
      问题二：如果 mysql 数据库是 8.0.18，需要替换 jar 文件夹中的数据库连接包包


todo 使用
1、订单微服务：cloud-seata-service-order2001      对应数据库：seata_order
   库存微服务：cloud-seata-service-storage2002      对应数据库：seata_storage
   账户微服务：cloud-seata-service-account2003      对应数据库：seata_account
   依赖：<!--seata:用于解决分布式事务问题-->
      <dependency>
          <groupId>com.alibaba.cloud</groupId>
          <artifactId>spring-cloud-alibaba-seata</artifactId>
          <version>2.2.0.RELEASE</version>
          <exclusions>
              <exclusion>
                  <artifactId>seata-spring-boot-starter</artifactId>
                  <groupId>io.seata</groupId>
              </exclusion>
          </exclusions>
      </dependency>
      <!--阿里分布式事务-->
      <dependency>
          <groupId>io.seata</groupId>
          <artifactId>seata-spring-boot-starter</artifactId>
          <version>1.1.0</version>
      </dependency>
2、订单微服务使用 feign 远程调用 库存微服务 与 账户微服务
  关键注意点：todo 1、使用 feign 远程调用微服务，需要在主启动类开启：@EnableFeignClients
                 2、需要在主配置类中添加 feign 连接时间和远程调用的微服务地址（微服务名.ribbon.listOfServers=http://host:port）
                 3、使用 seata 进行全局事务控制，需要在业务类方法上开启全局事务注解：
                    @GlobalTransactional(name = "order_create_tx", rollbackFor = Exception.class)






