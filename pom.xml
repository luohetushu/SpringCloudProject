<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.springcloud.project</groupId>
    <artifactId>SpringCloudProject</artifactId>
    <version>1.0-SNAPSHOT</version>
    <!--父工程：pom-->
    <packaging>pom</packaging>

    <modules>
        <!--多服务集群，实现负载均衡-->
        <!--服务端：支付模块：cloud-provider-payment8001-->
        <module>cloud-provider-payment8001</module>
        <!--服务端：支付模块：cloud-provider-payment8002-->
        <module>cloud-provider-payment8002</module>
        <!--客户端：订单模块：cloud-consumer-order80: 使用 Ribbon + RestTemplate 进行服务调用-->
        <module>cloud-consumer-order80</module>
        <!--工程重构，通用模块：cloud-api-common-->
        <module>cloud-api-common</module>
        <!--高可用，实现方法：搭建注册中心集群，实现负载均衡+故障容错-->
        <!--使用 Eureka 创建注册中心1：cloud-eureka-server7001-->
        <module>cloud-eureka-server7001</module>
        <!--使用 Eureka 创建注册中心2：cloud-eureka-server7002-->
        <module>cloud-eureka-server7002</module>
        <!--使用 Eureka 创建注册中心3：cloud-eureka-server7003-->
        <module>cloud-eureka-server7003</module>
        <!--服务端：支付模块：cloud-provider-payment8004: 用来注册进 Zookeeper 注册中心-->
        <module>cloud-provider-payment8004</module>
        <!--客户端：订单模块：cloud-consumer-zk-order80: 用来注册进 Zookeeper 注册中心-->
        <module>cloud-consumer-zk-order80</module>
        <!--客户端：订单模块：cloud-consumer-order80: 使用 OpenFeign 进行服务调用-->
        <module>cloud-consumer-feign-order80</module>
        <!--服务端：支付模块：cloud-provider-hystrix-payment8001，使用 hystrix 进行服务降级-->
        <module>cloud-provider-hystrix-payment8001</module>
        <!--客户端：订单模块：cloud-consumer-feign-hystrix-order80: 使用 OpenFeign 进行服务调用，使用 hystrix 进行服务降级-->
        <module>cloud-consumer-feign-hystrix-order80</module>
        <!--客户端：仪表盘9001：cloud-consumer-hystrix-dashboard9001-->
        <module>cloud-consumer-hystrix-dashboard9001</module>
        <!--服务网关：网关模块：cloud-gateway-gateway9527-->
        <module>cloud-gateway-gateway9527</module>
        <!--配置中心模块：服务端：cloud-config-center3344：用于连接管理远程仓库-->
        <module>cloud-config-center3344</module>
        <!--配置中心模块：客户端：cloud-config-client3355-->
        <module>cloud-config-client3355</module>
        <!--配置中心模块：客户端：cloud-config-client3366-->
        <module>cloud-config-client3366</module>
        <!--消息驱动之消息提供者：cloud-stream-rabbitmq-provider8801-->
        <module>cloud-stream-rabbitmq-provider8801</module>
        <!--消息消费者：cloud-stream-rabbitmq-consumer8802-->
        <module>cloud-stream-rabbitmq-consumer8802</module>
        <!--消息消费者：cloud-stream-rabbitmq-consumer8803-->
        <module>cloud-stream-rabbitmq-consumer8803</module>
        <!--Nacos: 服务提供者 cloudalibaba-provider-payment9001-->
        <module>cloudalibaba-provider-payment9001</module>
        <!--Nacos: 服务提供者 cloudalibaba-provider-payment9002-->
        <module>cloudalibaba-provider-payment9002</module>
        <!--Nacos: 服务消费者：cloudalibaba-consumer-order83-->
        <module>cloudalibaba-consumer-order83</module>
        <!--配置中心模块：客户端：cloudalibaba-config-nacos-client3377-->
        <module>cloudalibaba-config-nacos-client3377</module>
        <!--服务端：cloudalibaba-sentinel-service8401，使用 sentinel 进行服务降级、服务熔断与服务限流-->
        <module>cloudalibaba-sentinel-service8401</module>
        <module>cloudalibaba-provider-payment9003</module>
        <module>cloudalibaba-provider-payment9004</module>
        <module>cloudalibaba-consumer-order84</module>
        <!--使用 seata 解决分布式事务问题-->
        <!--订单微服务：cloud-seata-service-order2001-->
        <module>cloud-seata-service-order2001</module>
        <!--库存微服务：cloud-seata-service-storage2002-->
        <module>cloud-seata-service-storage2002</module>
        <!--账户微服务：cloud-seata-service-account2003-->
        <module>cloud-seata-service-account2003</module>
    </modules>

    <!--统一管理 jar 包版本-->
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <mysql.connector.java.version>8.0.18</mysql.connector.java.version>
        <mybatis-spring-boot-starter.version>2.1.3</mybatis-spring-boot-starter.version>
        <druid-spring-boot-starter.version>1.1.23</druid-spring-boot-starter.version>
        <lombok.version>1.18.12</lombok.version>
    </properties>

    <!--自模块继承之后，提供作用：锁定版本，子 module 不用写 groupId 和 version-->
    <dependencyManagement>
        <dependencies>

            <!--SpringBoot 2.2.4.release-->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>2.2.4.RELEASE</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!--SpringCloud Hoxton.SR5-->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>Hoxton.SR5</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!--spring cloud alibaba: 2.2.1.RELEASE-->
            <dependency>
                <groupId>com.alibaba.cloud</groupId>
                <artifactId>spring-cloud-alibaba-dependencies</artifactId>
                <version>2.2.1.RELEASE</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!--mysql 连接-->
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>${mysql.connector.java.version}</version>
                <scope>runtime</scope>
            </dependency>

            <!--mybatis:mybatis-spring-boot-starter-->
            <dependency>
                <groupId>org.mybatis.spring.boot</groupId>
                <artifactId>mybatis-spring-boot-starter</artifactId>
                <version>${mybatis-spring-boot-starter.version}</version>
            </dependency>

            <!--lombok：为注解的类自动生成 get、set、toString、equals和hashCode方法-->
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
            </dependency>

            <!--Druid: 数据库连接池-->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid-spring-boot-starter</artifactId>
                <version>${druid-spring-boot-starter.version}</version>
            </dependency>


        </dependencies>
    </dependencyManagement>

</project>